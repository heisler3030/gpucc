<h1>Today's Workouts</h1>

<%#

For each workout, show exercises assigned
then show a form for each exercise, which submits a completedset

Unpack the controller package and
	- Create a section for each workout
		- Show the workout_exercises and progress for each
		- Create a user form with pre-wired completed_sets for each workout_exercise 
		- Show the past completed_sets

%>

<% @workout_activities.each do |wa| %>

	<h3><%= wa.workout.start_date %></h3>

	
	<%#----- Assignment Section --------%>	
	<h4>Assignment</h4>
	<table class="table">
		<% wa.workout_exercises.each do |we| %>
			<tr>
				<td><%= we.exercise.name %></td>
				<td><%= we.goal %></td>
				<td><%= we.comments %></td>
			</tr>
		<% end %>
	</table>

	<%#----- Input Section --------%>
	<%# http://stackoverflow.com/questions/972857/multiple-objects-in-a-rails-form %>

	<%= form_tag completed_sets_path, :class => 'form', :role => 'form' do %>
		<% wa.new_sets.each_with_index do |completed_set,i| %>
			<%= fields_for "completed_sets[#{i}]", completed_set do |ns| %>
				<div class="form-group">
				  <%= ns.hidden_field :exercise_id %>			  
				</div>
				<div class="form-group">
				  <%= ns.hidden_field :workout_id %>			  
				</div>		
				<div class="form-group">
				  <%= ns.label :reps, ns.object.exercise.name %>
				  <%= ns.text_field :reps, {:class => "form-control", :style => "width:60px", :maxlength => "4"} %>			  
				</div>	
			<% end %>
		<% end %>

		<div class="form-group">
			<%= submit_tag "Record Set" %>
		</div>

	<% end %>

	<%#----- Previous Sets Section --------%>

	<h4>Previous Sets</h4>
	<table class="table">
		<% wa.completed_sets.each do |cs| %>
			<tr class="completed_set">
				<td><%= cs.exercise.name %></td>
				<td><%= cs.reps %></td>
				<td><%= cs.complete_time %></td>
				<td><%= link_to "Edit", nil, :onClick => "editCompletedSet(#{cs.id}); return false;" %></td>

				<%# How it works
					- JS onclick calls function in gpucc.js
					- jquery call submits ajax to completed_sets#edit, triggering controller event
					- controller event sees AJAX request, fetches cs and loads to @completedsetform and triggers JS response (generated from erb template)
					- JS response replaces modal content and toggles modal 

					- submit of modal form triggers completed_sets#update action
					- on successful save, flash success notice and render page again <=== what is the page here, how do I go "back to where I came from" 
					- on unsuccessful save, return to page with modal still enabled					
				%>
			</tr>
		<% end %>
	</table>

<hr/>		
<% end %>

<%#- Modal Edit window - populated by AJAX %>
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
  	<div class="modal-content">
  		...
  	</div>
  </div>
</div>
